/*
 * -------------------------------------------------
 *  ENA/localdatahub Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // TODO: Specify your pipeline's command line flags

  //default params
  outdir = './results'
  metadata_output = './logs'
  readFiles_output = './rawReadsFiles'
  analysis_logs_output = './logs'
  ignore_list = './ignore_list.txt'
  asynchronous = 'false'
  test = 'true'
  analysisConfig_location = './conf'
  metadata_project_id = ''
  tax_id = ''


  // OPTIONAL: include the value for the following parameters or they can be indicated directly in the command line

  //submit_project_id = 
  //fileType = 
  //analysis_type = 
  //webin_username = 
  //webin_password = 


  // Boilerplate options
  tracedir = "${params.outdir}/pipeline_info"


  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
//to avoid entering the Container image as a command line parameter
process.container = '/path/to/containerImage'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
    timeline.overwrite = true
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
  report.overwrite = true
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  trace.overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'ENA/localdatahub'
  author = 'ahmad zyoud'
  homePage = 'https://github.com/enasequence/ena-local-datahub'
  description = 'ena local datahub'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
